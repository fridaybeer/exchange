// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// ProcessOrderOKCode is the HTTP code returned for type ProcessOrderOK
const ProcessOrderOKCode int = 200

/*ProcessOrderOK susscefull operation

swagger:response processOrderOK
*/
type ProcessOrderOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewProcessOrderOK creates ProcessOrderOK with default headers values
func NewProcessOrderOK() *ProcessOrderOK {

	return &ProcessOrderOK{}
}

// WithPayload adds the payload to the process order o k response
func (o *ProcessOrderOK) WithPayload(payload string) *ProcessOrderOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the process order o k response
func (o *ProcessOrderOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProcessOrderOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// ProcessOrderBadRequestCode is the HTTP code returned for type ProcessOrderBadRequest
const ProcessOrderBadRequestCode int = 400

/*ProcessOrderBadRequest invalid order

swagger:response processOrderBadRequest
*/
type ProcessOrderBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewProcessOrderBadRequest creates ProcessOrderBadRequest with default headers values
func NewProcessOrderBadRequest() *ProcessOrderBadRequest {

	return &ProcessOrderBadRequest{}
}

// WithPayload adds the payload to the process order bad request response
func (o *ProcessOrderBadRequest) WithPayload(payload string) *ProcessOrderBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the process order bad request response
func (o *ProcessOrderBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProcessOrderBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
