// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewProcessOrderParams creates a new ProcessOrderParams object
// no default values defined in spec.
func NewProcessOrderParams() ProcessOrderParams {

	return ProcessOrderParams{}
}

// ProcessOrderParams contains all the bound params for the process order operation
// typically these are obtained from a http.Request
//
// swagger:parameters processOrder
type ProcessOrderParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Trander Identifier
	  In: header
	*/
	XTOKEN *string
	/*Asset name
	  Required: true
	  In: formData
	*/
	Asset string
	/*Asset quantity
	  Required: true
	  In: formData
	*/
	Quantity int64
	/*Order type buy/sell
	  Required: true
	  In: formData
	*/
	Type string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewProcessOrderParams() beforehand.
func (o *ProcessOrderParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	if err := o.bindXTOKEN(r.Header[http.CanonicalHeaderKey("X-TOKEN")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	fdAsset, fdhkAsset, _ := fds.GetOK("asset")
	if err := o.bindAsset(fdAsset, fdhkAsset, route.Formats); err != nil {
		res = append(res, err)
	}

	fdQuantity, fdhkQuantity, _ := fds.GetOK("quantity")
	if err := o.bindQuantity(fdQuantity, fdhkQuantity, route.Formats); err != nil {
		res = append(res, err)
	}

	fdType, fdhkType, _ := fds.GetOK("type")
	if err := o.bindType(fdType, fdhkType, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindXTOKEN binds and validates parameter XTOKEN from header.
func (o *ProcessOrderParams) bindXTOKEN(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.XTOKEN = &raw

	return nil
}

// bindAsset binds and validates parameter Asset from formData.
func (o *ProcessOrderParams) bindAsset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("asset", "formData")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("asset", "formData", raw); err != nil {
		return err
	}

	o.Asset = raw

	return nil
}

// bindQuantity binds and validates parameter Quantity from formData.
func (o *ProcessOrderParams) bindQuantity(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("quantity", "formData")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("quantity", "formData", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("quantity", "formData", "int64", raw)
	}
	o.Quantity = value

	return nil
}

// bindType binds and validates parameter Type from formData.
func (o *ProcessOrderParams) bindType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("type", "formData")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("type", "formData", raw); err != nil {
		return err
	}

	o.Type = raw

	return nil
}
